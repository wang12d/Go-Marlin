package marlin

// #cgo LDFLAGS: -lmarlin_zsk -L${SRCDIR}/../lib
// #include <stdbool.h>
// #include <stdlib.h>
// #include "./../lib/marlin_zsk.h"
import "C"
import (
	"encoding/hex"
	"log"
)

// ZebraLancerGenerateProofAndVerifyKey generates the zero-knowledge proof desribed by
// ICDCS paper ZebraLancer
func ZebraLancerGenerateProofAndVerifyKey(prefix, msg, sk, pk, cert, mpk, t1, t2 []byte) (proof Proof, verifyKey VerifyKey) {
	hexPrefix := C.CString(hex.EncodeToString(prefix))
	hexMsg := C.CString(hex.EncodeToString(msg))
	hexSk := C.CString(hex.EncodeToString(sk))
	hexPk := C.CString(hex.EncodeToString(pk))
	hexCert := C.CString(hex.EncodeToString(cert))
	hexMpk := C.CString(hex.EncodeToString(mpk))
	hexT1 := C.CString(hex.EncodeToString(t1))
	hexT2 := C.CString(hex.EncodeToString(t2))
	witness := C.ZebraLancerWitness{
		sk:   hexSk,
		pk:   hexPk,
		cert: hexCert,
	}
	proofAndKey := C.generate_proof_zebralancer(hexPrefix, hexMsg, hexMpk, hexT1, hexT2, witness)
	defer C.free_proof_and_verify(proofAndKey.proof, proofAndKey.vk)
	encodedProof, encodedVerifyKey := C.GoString(proofAndKey.proof), C.GoString(proofAndKey.vk)
	var err error
	if proof, err = hex.DecodeString(encodedProof); err != nil {
		log.Fatalln("Hex decode error")
	}
	if verifyKey, err = hex.DecodeString(encodedVerifyKey); err != nil {
		log.Fatalln("Hex decode error")
	}
	return proof, verifyKey
}

// ZebraLancerVerifyProof verifys the zero knowledge proof generated by requester with
// its public inputs
func ZebraLancerVerifyProof(t1, t2 []byte, proof Proof, verifyKey VerifyKey) bool {
	hexT1, hexT2 := C.CString(hex.EncodeToString(t1)), C.CString(hex.EncodeToString(t2))
	proofHex, verifyKeyHex := C.CString(hex.EncodeToString(proof)), C.CString(hex.EncodeToString(verifyKey))
	return bool(C.verify_proof_zebralancer(hexT1, hexT2, proofHex, verifyKeyHex))
}

// ZebraLancerGenerateProofAndVerifyKeyRewarding completes the rewarding zero
// knowledge proof of zebralancer
func ZebraLancerGenerateProofAndVerifyKeyRewarding(mu, sigmaSquare, data uint, rawData,
	publicKey, privateKey, encryptedData []byte) (proof Proof, verifyKey VerifyKey) {
	/****************************************
			Convert to C String
	****************************************/
	hexRawData := C.CString(hex.EncodeToString(rawData))
	hexPublicKey := C.CString(hex.EncodeToString(publicKey))
	hexPrivateKey := C.CString(hex.EncodeToString(privateKey))
	hexEncryptedData := C.CString(hex.EncodeToString(encryptedData))

	proofAndKey := C.generate_proof_zebralancer_rewarding(C.uint(mu), C.uint(sigmaSquare), C.uint(data),
		hexRawData, hexPublicKey, hexPrivateKey, hexEncryptedData)
	defer C.free_proof_and_verify(proofAndKey.proof, proofAndKey.vk)
	encodedProof, encodedVerifyKey := C.GoString(proofAndKey.proof), C.GoString(proofAndKey.vk)
	var err error
	if proof, err = hex.DecodeString(encodedProof); err != nil {
		log.Fatalln("Hex decode error")
	}
	if verifyKey, err = hex.DecodeString(encodedVerifyKey); err != nil {
		log.Fatalln("Hex decode error")
	}
	return proof, verifyKey
}

func ZebraLancerVerifyProofKeyRewarding(qualityOne, qualityTwo uint, ciphertext, proof, vk []byte) bool {
	/****************************************
			Convert to C String
	****************************************/
	hexCiphertext := C.CString(hex.EncodeToString(ciphertext))
	hexProof := C.CString(hex.EncodeToString(proof))
	hexVK := C.CString(hex.EncodeToString(vk))
	return bool(C.verify_proof_zebralancer_rewarding(C.uint(qualityOne), C.uint(qualityTwo), hexCiphertext, hexProof, hexVK))
}
